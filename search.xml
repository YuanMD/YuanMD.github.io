<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C语言学习笔记</title>
      <link href="/2023/04/10/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/04/10/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><h2 id="1-1-变量"><a href="#1-1-变量" class="headerlink" title="1.1 变量"></a>1.1 变量</h2><ul><li><p>变量定义的一般形式就是：</p><ul><li>&lt;类型名称&gt; &lt;变量名称&gt;;</li></ul></li><li><p>变量需要一个名字，变量的名字是一种“标识符”，意思是它是用来识别这个和那个的不同的名字。</p></li><li><p>标识符有标识符的构造规则。基本的原则是：标识符只能由__字母__、__数字__和__下划线__组成，数字不可以出现在第一个位置上，C语言的关键字（有的地方叫它们保留字）不可以用做标识符。</p></li><li><p>所有变量在第一次被使用（出现在赋值运算符的右边）之前应该被赋值一次。</p></li><li><p>C是一种有类型的语言，所有的变量在使用之前必须__定义__或__声明__，所有的变量必须具有确定的数据类型。数据类型表示在变量中可以存放什么样的数据，变量中只能存放指定类型的数据，程序运行过程中也不能改变变量的类型。</p></li></ul><h2 id="1-2-常量"><a href="#1-2-常量" class="headerlink" title="1.2 常量"></a>1.2 常量</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> AMOUNT = <span class="number">100</span></span><br><span class="line">    <span class="type">int</span> price = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入金额（元）：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;price);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> change = AMOUNT - price;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;找您%d元\n&quot;</span>, change);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>固定不变的数，是常数。直接写在程序里，我们称作直接量（literal）</p></li><li><p>更好的方式，是定义一个常量：</p><ul><li>const int AMOUNT &#x3D; 100;</li></ul></li><li><p>const是一个修饰符，加在int的前面，用来给这个变量加上一个const（不变的）的属性。这个const的属性表示这个变量的值一旦初始化，就不能再修改了。</p></li><li><p>如果你试图对常量做修改，把它放在赋值运算符的左边，就会被编译器发现，指出为一个错误。</p></li></ul><h2 id="1-3-浮点数"><a href="#1-3-浮点数" class="headerlink" title="1.3 浮点数"></a>1.3 浮点数</h2><ul><li>带小数点的数值。浮点这个词的本意就是指小数点是浮动的，是计算机内部表达非整数（包含分数和无理数）的一种方式。</li><li>当浮点数和整数放到一起运算时，C会将整数转换成__浮点数__，然后进行浮点数的运算。</li></ul><h2 id="1-4-运算符"><a href="#1-4-运算符" class="headerlink" title="1.4 运算符"></a>1.4 运算符</h2><table><thead><tr><th align="center">优先级</th><th align="center">运算符</th><th align="center">运算</th><th align="center">结合关系</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">+</td><td align="center">单目不变</td><td align="center">自右向左</td><td align="center">a*+b</td></tr><tr><td align="center">1</td><td align="center">-</td><td align="center">单目取负</td><td align="center">自右向左</td><td align="center">a*-b</td></tr><tr><td align="center">2</td><td align="center">*</td><td align="center">乘</td><td align="center">自左向右</td><td align="center">a*b</td></tr><tr><td align="center">2</td><td align="center">&#x2F;</td><td align="center">除</td><td align="center">自左向右</td><td align="center">a&#x2F;b</td></tr><tr><td align="center">2</td><td align="center">%</td><td align="center">取余</td><td align="center">自左向右</td><td align="center">a%b</td></tr><tr><td align="center">3</td><td align="center">+</td><td align="center">加</td><td align="center">自左向右</td><td align="center">a+b</td></tr><tr><td align="center">3</td><td align="center">-</td><td align="center">减</td><td align="center">自左向右</td><td align="center">a-b</td></tr><tr><td align="center">4</td><td align="center">&#x3D;</td><td align="center">赋值</td><td align="center">自右向左</td><td align="center">a&#x3D;b</td></tr></tbody></table><h2 id="1-5-关系运算"><a href="#1-5-关系运算" class="headerlink" title="1.5 关系运算"></a>1.5 关系运算</h2><ul><li>所有的关系运算符的优先级比算术运算的低，但是比赋值运算的高。</li></ul><table><thead><tr><th align="center">运算符</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">&#x3D;&#x3D;</td><td align="center">相等</td></tr><tr><td align="center">!&#x3D;</td><td align="center">不相等</td></tr><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&gt;&#x3D;</td><td align="center">大于或等于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&lt;&#x3D;</td><td align="center">小于或等于</td></tr></tbody></table><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><h2 id="2-1-多路分支switch-case"><a href="#2-1-多路分支switch-case" class="headerlink" title="2.1 多路分支switch-case"></a>2.1 多路分支switch-case</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (控制表达式) &#123;</span><br><span class="line">    <span class="keyword">case</span> 常量:</span><br><span class="line">        语句</span><br><span class="line">    <span class="keyword">case</span> 常量:</span><br><span class="line">    语句</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    语句    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>控制表达式只能是__整数__类型的结果</li><li>常量可以是常数，也可以是常数计算的表达式</li></ul><h2 id="2-2-循环"><a href="#2-2-循环" class="headerlink" title="2.2 循环"></a>2.2 循环</h2><ul><li><p>循环体内要有改变条件的机会</p></li><li><p>for(初始动作；条件；每轮的动作) { }</p><ul><li>for中的每一个表达式都是可以省略的</li><li>for(；条件；) &#x3D;&#x3D; while(条件)</li></ul></li><li><p>如果有固定次数，用for</p></li><li><p>如果必须执行一次，用do_while</p></li><li><p>其他情况用while</p></li></ul><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><h2 id="3-1-数据类型"><a href="#3-1-数据类型" class="headerlink" title="3.1 数据类型"></a>3.1 数据类型</h2><ul><li>所表达的数的范围：char &lt; short &lt; int &lt; float &lt; double</li></ul><h3 id="3-1-1-sizeof"><a href="#3-1-1-sizeof" class="headerlink" title="3.1.1 sizeof"></a>3.1.1 sizeof</h3><ul><li><p>sizeof是一个运算符，给出某个类型或变量在内存中所占的字节数</p><ul><li>sizeof(int)</li><li>sizeof(i)</li></ul></li><li><p>是__静态运算符__，它的结果在编译时刻就决定了</p></li><li><p>不要在sizeof的括号里做运算，这些运算不会做的</p></li></ul><h3 id="3-1-2-整数"><a href="#3-1-2-整数" class="headerlink" title="3.1.2 整数"></a>3.1.2 整数</h3><ul><li><p>char：1字节（8比特）-128 ~ 127</p></li><li><p>short：2字节 -32768 ~ 32767</p></li><li><p>int：取决于编译器（CPU）,通常的意义是“1个字”</p></li><li><p>long：取决于编译器（CPU）,通常的意义是“1个字”</p></li><li><p>long long：8字节</p></li><li><p>为什么整数要有那么多种？</p><ul><li>为了准确表达内存，做底层程序的需要</li></ul></li><li><p>没有特殊需要，就选择int</p><ul><li>现在CPU的字长普遍是32位或64位，一次内存读写就是一个int，一次计算也是一个int，选择更短的类型不会更快，甚至可能更慢</li><li>*现代的编译器一般会设计内存对齐，所以更短的类型实际在内存中有可能也占据一个int的大小(虽然sizeof告诉你更小)</li></ul></li><li><p>unsigned与否只是输出的不同，内部计算是一样的</p></li></ul><h3 id="3-1-3-unsigned"><a href="#3-1-3-unsigned" class="headerlink" title="3.1.3 unsigned"></a>3.1.3 unsigned</h3><ul><li><p>如果一个字面量常数想要表达自己是unsigned，可以在后面加u或U</p><ul><li>255U</li></ul></li><li><p>用l或L表示long(long)</p></li><li><p>*unsigned的初衷并非扩展数能表达的范围，而是为了做纯二进制运算，主要是为了移位</p></li></ul><h3 id="3-1-4-浮点数"><a href="#3-1-4-浮点数" class="headerlink" title="3.1.4 浮点数"></a>3.1.4 浮点数</h3><ul><li>printf输出inf表示__超过范围__的浮点数：±∞</li><li>printf输出nan表示__不存在__的浮点数</li></ul><p>运算精度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">float</span> a, b, c;</span><br><span class="line">    </span><br><span class="line">    a = <span class="number">1.345f</span>;</span><br><span class="line">    b = <span class="number">1.123f</span>;</span><br><span class="line">    c = a + b;</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="number">2.468</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;相等\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;不相等! c=%.10f,或%f\n&quot;</span>,c, c);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>带小数点的字面量是double而非float</li><li>float需要用f或F后缀来表明身份</li><li>f1 &#x3D;&#x3D; f2可能失败<ul><li>fabs(f1-f2) &lt; 1e-12</li></ul></li></ul><p>浮点类型选择</p><ul><li>如果没有特殊需要，只是用double</li><li>现代CPU能直接对double做硬件运算，性能不会比float差，在64位的机器上，数据存储的速度也不比float慢</li></ul><h3 id="3-1-5-bool"><a href="#3-1-5-bool" class="headerlink" title="3.1.5 bool"></a>3.1.5 bool</h3><ul><li>#include &lt;stdbool.h&gt;</li><li>之后就可以使用bool和true、false</li></ul><h2 id="3-2-类型转换"><a href="#3-2-类型转换" class="headerlink" title="3.2 类型转换"></a>3.2 类型转换</h2><ul><li><p>当运算符的两边出现不一致的类型时，会自动转换成较大的类型</p><ul><li>大的意思是能表达的数的范围更大</li><li>char—&gt;short—&gt;int—&gt;long—&gt;long long</li><li>int—&gt;float—&gt;double</li></ul></li><li><p>对于printf，任何小于int的类型会被转换成int；float会被转换成double</p></li><li><p>但是scanf不会，要输入short，需要%hd</p></li><li><p>要把一个量强制转换成另一个类型（通常是较小的类型），需要：（类型）值</p></li><li><p>注意这时候的安全性，小的变量不总能表达大的量</p><ul><li>(short)32768</li></ul></li><li><p>只是从那个变量计算出了一个__新的类型的值__，它并不改变那个变量，无论是值还是类型都不改变</p></li></ul><h2 id="3-3-逻辑运算"><a href="#3-3-逻辑运算" class="headerlink" title="3.3 逻辑运算"></a>3.3 逻辑运算</h2><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">!</td><td align="center">逻辑非</td><td align="center">!a</td></tr><tr><td align="center">&amp;&amp;</td><td align="center">逻辑与</td><td align="center">a&amp;&amp;b</td></tr><tr><td align="center">||</td><td align="center">逻辑或</td><td align="center">a||b</td></tr></tbody></table><h3 id="3-3-1-优先级"><a href="#3-3-1-优先级" class="headerlink" title="3.3.1 优先级"></a>3.3.1 优先级</h3><table><thead><tr><th align="center">优先级</th><th align="center">运算符</th><th align="center">结合性</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">()</td><td align="center">从左到右</td></tr><tr><td align="center">2</td><td align="center">! + - ++ –</td><td align="center">从右到左</td></tr><tr><td align="center">3</td><td align="center">* &#x2F; %</td><td align="center">从左到右</td></tr><tr><td align="center">4</td><td align="center">+ -</td><td align="center">从左到右</td></tr><tr><td align="center">5</td><td align="center">&lt; &lt;&#x3D; &gt; &gt;&#x3D;</td><td align="center">从左到右</td></tr><tr><td align="center">6</td><td align="center">&#x3D;&#x3D; !&#x3D;</td><td align="center">从左到右</td></tr><tr><td align="center">7</td><td align="center">&amp;&amp;</td><td align="center">从左到右</td></tr><tr><td align="center">8</td><td align="center">||</td><td align="center">从左到右</td></tr><tr><td align="center">9</td><td align="center">&#x3D; +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; %&#x3D;</td><td align="center">从右到左</td></tr></tbody></table><h3 id="3-3-2-短路"><a href="#3-3-2-短路" class="headerlink" title="3.3.2 短路"></a>3.3.2 短路</h3><ul><li><p>逻辑运算是自左向右进行的，如果左边的结果已经能够决定结果了，就不会做右边的计算</p><ul><li>a&#x3D;&#x3D;6 &amp;&amp; b&#x3D;&#x3D;1</li><li>a&#x3D;&#x3D;6 &amp;&amp; b+&#x3D;1</li></ul></li><li><p>对于&amp;&amp;，左边是false时就不做右边了</p></li><li><p>对于||，左边是true时就不做右边了</p></li><li><p><strong>不要把赋值，包括复合赋值组合进表达式</strong></p></li></ul><h2 id="3-4-条件运算符"><a href="#3-4-条件运算符" class="headerlink" title="3.4 条件运算符"></a>3.4 条件运算符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">count = (count &gt; <span class="number">20</span>)?count<span class="number">-10</span>:count+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(count&gt;<span class="number">20</span>)</span><br><span class="line">    count = count - <span class="number">10</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    count = count + <span class="number">10</span>;</span><br></pre></td></tr></table></figure><ul><li>条件运算符额优先级高于赋值运算符，但是低于其他运算符</li></ul><h3 id="3-4-1-逗号运算符"><a href="#3-4-1-逗号运算符" class="headerlink" title="3.4.1 逗号运算符"></a>3.4.1 逗号运算符</h3><ul><li>逗号用来连接两个表达式，并以其__右边__的表达式的值作为它的__结果__。逗号的优先级是所有的运算符中__最低__的，所以它两边的表达式会先计算；逗号的组合关系是自左向右，所以左边的表达式会先计算，而右边的表达式的值就留下来作为逗号运算的结果。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    i = <span class="number">3</span>+<span class="number">4</span>,<span class="number">5</span>+<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在for中使用</p><ul><li>for(i&#x3D;0 , j&#x3D;10 ; i&lt;j ; i++ , j– )</li></ul><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> begin, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=begin; i&lt;=end; i++)&#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d到%d的和是%d\n&quot;</span>, begin, end, sum);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    sum(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">    sum(<span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line">    sum(<span class="number">35</span>, <span class="number">45</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像这样把sum()写在上面，是因为：C的编译器__自上而下__顺序分析你的代码</p><ul><li>在看到sum(1, 10)的时候，它需要知道sum()的样子，也就是sum()要几个参数，每个参数的类型如何，返回什么类型，这样它才能检查你对sum()的调用是否正确。</li></ul><h2 id="4-1-参数传递"><a href="#4-1-参数传递" class="headerlink" title="4.1 参数传递"></a>4.1 参数传递</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">cheer</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;cheer %d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    cheer(<span class="number">2.4</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用函数时给的值与参数的类型不匹配是C语言传统上最大的漏洞</li><li>编译器总是悄悄替你把类型转换好，但是这很可能不是你所期望的</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="type">int</span> t=a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = t;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> b=<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    swap(a, b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d b=%d\n&quot;</span>,a, b);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>C语言在调用函数时，永远只能传值给函数</li><li>每个函数有自己的变量空间，参数也位于这个独立的空间中，和其他函数没有关系</li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
